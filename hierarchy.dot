// This file is generated by the following command and then patched by hand:
// $ ocaml hierarchy.ml -canonicals off -coercions blue -R classical \
//     mathcomp.classical -R theories mathcomp.analysis -lib all_analysis \
//     > hierarchy.dot
// where `all_analysis.v` is a file that exports libraries implementing the
// inheritance hierarchy, including `numFieldNormedType.Exports`.
digraph structures {
graph[ranksep=.3 nodesep=.05 margin=0];
node[shape=box style="rounded,filled" fillcolor="lightgray" penwidth=0 margin=.04 width=0 height=0];
edge[arrowsize=.4];
/******************************************************************************/
"Equality"[label="eqType"];
"Choice"[label="choiceType"];
"Countable"[label="countType"];
"Finite"[label="finType"];
"Order.POrder"[label="porderType"];
"Order.Lattice"[label="latticeType"];
"Order.DistrLattice"[label="distrLatticeType"];
"Order.Total"[label="orderType"];
"GRing.Zmodule"[label="zmodType"];
"GRing.Ring"[label="ringType"];
"GRing.ComRing"[label="comRingType"];
"GRing.UnitRing"[label="unitRingType"];
"GRing.ComUnitRing"[label="comUnitRingType"];
"GRing.IntegralDomain"[label="idomainType"];
"GRing.Field"[label="fieldType"];
"GRing.DecidableField"[label="decFieldType"];
"GRing.ClosedField"[label="closedFieldType"];
"GRing.Lmodule"[label="lmodType"];
"GRing.Lalgebra"[label="lalgType"];
"GRing.Algebra"[label="algType"];
"GRing.ComAlgebra"[label="comAlgType"];
"GRing.UnitAlgebra"[label="unitAlgType"];
"GRing.ComUnitAlgebra"[label="comUnitAlgType"];
"Num.NormedZmodule"[label="normedZmodType"];
"Num.NumDomain"[label="numDomainType"];
"Num.NumField"[label="numFieldType"];
"Num.ClosedField"[label="numClosedFieldType"];
"Num.RealDomain"[label="realDomainType"];
"Num.RealField"[label="realFieldType"];
"Num.ArchimedeanField"[label="archiFieldType"];
"Num.RealClosedField"[label="rcfType"];
"Vector"[label="vectType"];
"Falgebra"[label="FalgType"];
"FieldExt"[label="fieldExtType"];
"SplittingField"[label="splittingFieldType"];
"Empty"[label="emptyType" color="red2" fillcolor="lightpink" penwidth=2];
"Pointed"[label="pointedType" color="red2" fillcolor="lightpink" penwidth=2];
"Filtered"[label="filteredType" color="red2" fillcolor="lightpink" penwidth=2];
"Topological"[label="topologicalType" color="red2" fillcolor="lightpink" penwidth=2];
"Uniform"[label="uniformType" color="red2" fillcolor="lightpink" penwidth=2];
"PseudoMetric"[label="pseudoMetricType" color="red2" fillcolor="lightpink" penwidth=2];
"PseudoMetricNormedZmodule"[label="pseudoMetricNormedZmodType" color="red2" fillcolor="lightpink" penwidth=2];
"NormedModule"[label="normedModType" color="red2" fillcolor="lightpink" penwidth=2];
"Complete"[label="completeType" color="red2" fillcolor="lightpink" penwidth=2];
"CompletePseudoMetric"[label="completePseudoMetricType" color="red2" fillcolor="lightpink" penwidth=2];
"CompleteNormedModule"[label="completeNormedModType" color="red2" fillcolor="lightpink" penwidth=2];
"Real"[label="realType" color="red2" fillcolor="lightpink" penwidth=2];
/******************************************************************************/
"Choice" -> "Countable"[];
"Choice" -> "GRing.Zmodule"[];
"Choice" -> "Order.POrder"[];
"Choice" -> "Pointed"[style="dashed" color="red2" penwidth=2];
"Complete" -> "CompletePseudoMetric"[style="dashed" color="red2" penwidth=2];
"CompletePseudoMetric" -> "CompleteNormedModule"[style="dashed" color="red2" penwidth=2];
"Countable" -> "Finite"[];
"Equality" -> "Choice"[];
"Falgebra" -> "FieldExt"[];
"FieldExt" -> "Num.NumField"[style="dotted" color="red2" penwidth=2];
"FieldExt" -> "SplittingField"[];
"Filtered" -> "Topological"[style="dashed" color="red2" penwidth=2];
"Finite" -> "Empty"[style="dashed" color="red2" penwidth=2];
"GRing.Algebra" -> "GRing.ComAlgebra"[];
"GRing.Algebra" -> "GRing.UnitAlgebra"[];
"GRing.ClosedField" -> "Num.ClosedField"[];
"GRing.ComAlgebra" -> "GRing.ComUnitAlgebra"[];
"GRing.ComRing" -> "GRing.ComAlgebra"[];
"GRing.ComRing" -> "GRing.ComUnitRing"[];
"GRing.ComUnitAlgebra" -> "FieldExt"[];
"GRing.ComUnitRing" -> "GRing.ComUnitAlgebra"[];
"GRing.ComUnitRing" -> "GRing.IntegralDomain"[];
"GRing.DecidableField" -> "GRing.ClosedField"[];
"GRing.Field" -> "FieldExt"[];
"GRing.Field" -> "GRing.DecidableField"[];
"GRing.Field" -> "Num.NumField"[];
"GRing.IntegralDomain" -> "GRing.Field"[];
"GRing.IntegralDomain" -> "Num.NumDomain"[];
"GRing.Lalgebra" -> "GRing.Algebra"[];
"GRing.Lmodule" -> "GRing.Lalgebra"[];
"GRing.Lmodule" -> "NormedModule"[style="dashed" color="red2" penwidth=2];
"GRing.Lmodule" -> "Vector"[];
"GRing.Ring" -> "GRing.ComRing"[];
"GRing.Ring" -> "GRing.Lalgebra"[];
"GRing.Ring" -> "GRing.UnitRing"[];
"GRing.UnitAlgebra" -> "Falgebra"[];
"GRing.UnitAlgebra" -> "GRing.ComUnitAlgebra"[];
"GRing.UnitRing" -> "GRing.ComUnitRing"[];
"GRing.UnitRing" -> "GRing.UnitAlgebra"[];
"GRing.Zmodule" -> "GRing.Lmodule"[];
"GRing.Zmodule" -> "GRing.Ring"[];
"GRing.Zmodule" -> "Num.NormedZmodule"[];
"NormedModule" -> "CompleteNormedModule"[style="dashed" color="red2" penwidth=2];
"NormedModule" -> "Num.NumField"[style="dotted" color="red2" penwidth=2];
"Num.ArchimedeanField" -> "Real"[style="dashed" color="red2" penwidth=2];
"Num.NormedZmodule" -> "Num.NumDomain"[];
"Num.NormedZmodule" -> "PseudoMetricNormedZmodule"[style="dashed" color="red2" penwidth=2];
"Num.NumDomain" -> "Num.NumField"[];
"Num.NumDomain" -> "Num.RealDomain"[];
"Num.NumField" -> "Num.ClosedField"[];
"Num.NumField" -> "Num.RealField"[];
"Num.RealClosedField" -> "Real"[style="dashed" color="red2" penwidth=2];
"Num.RealDomain" -> "Num.RealField"[];
"Num.RealField" -> "Num.ArchimedeanField"[];
"Num.RealField" -> "Num.RealClosedField"[];
"Order.DistrLattice" -> "Order.Total"[];
"Order.Lattice" -> "Order.DistrLattice"[];
"Order.POrder" -> "Num.NumDomain"[];
"Order.POrder" -> "Order.Lattice"[];
"Order.Total" -> "Num.RealDomain"[];
"Pointed" -> "Filtered"[style="dashed" color="red2" penwidth=2];
"PseudoMetric" -> "CompletePseudoMetric"[style="dashed" color="red2" penwidth=2];
"PseudoMetric" -> "PseudoMetricNormedZmodule"[style="dashed" color="red2" penwidth=2];
"PseudoMetricNormedZmodule" -> "NormedModule"[style="dashed" color="red2" penwidth=2];
"Topological" -> "Uniform"[style="dashed" color="red2" penwidth=2];
"Uniform" -> "Complete"[style="dashed" color="red2" penwidth=2];
"Uniform" -> "PseudoMetric"[style="dashed" color="red2" penwidth=2];
"Vector" -> "Falgebra"[];
}
